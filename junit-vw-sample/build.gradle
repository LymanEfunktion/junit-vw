import javassist.bytecode.AnnotationsAttribute
import javassist.bytecode.AttributeInfo
import javassist.bytecode.ClassFile
import javassist.bytecode.ConstPool
import javassist.bytecode.annotation.Annotation
import javassist.bytecode.annotation.ClassMemberValue
import de.quality.vw.JUnitVWRunner
import de.quality.vw.ParameterizedJUnitVWRunner

apply plugin: 'java'
apply plugin: 'eclipse'

dependencies {
	testCompile 'de.quality:junit-vw:4.0'
	testCompile 'javassist:javassist:3.12.1.GA'
	testCompile 'junit:junit:4.12'
	testCompile 'org.hamcrest:hamcrest-core:1.3'
	testCompile 'org.hamcrest:hamcrest-library:1.3'
}

repositories {
	mavenLocal()
	jcenter()
}


buildscript {
	repositories {
		mavenCentral()
		mavenLocal()
	}
	dependencies {
		classpath 'de.quality:junit-vw:4.0'
		classpath 'javassist:javassist:3.12.1.GA'
	}
}

test {
	doFirst {
		FileTree tree = fileTree('build/classes/test').include('**/**.class')
		tree.each { file ->
			ClassFile clazz = new ClassFile(new DataInputStream(new FileInputStream(file)))
			ConstPool pool = clazz.getConstPool()
			AnnotationsAttribute runWithAnnotation
			ClassMemberValue runner
			clazz.getAttributes().each { attribute ->
				if (isRuntimeAnnotation(attribute)) {
					runWithAnnotation = attribute
					if (runWithAnnotation.getAnnotations()) {
						for (Annotation an : runWithAnnotation.getAnnotations()) {
							if (an.getTypeName().equals("org.junit.runner.RunWith")) {
								runner = an.getMemberValue("value")
							}
						}
					}
				} else {
					runWithAnnotation = new AnnotationsAttribute(pool, AnnotationsAttribute.visibleTag)
				}
			}
			clazz.getMethods().each {
				it.getAttributes().each { attribute ->
					if (isRuntimeAnnotation(attribute)) {
						if (attribute.getAnnotations()) {
							for (Annotation an : attribute.getAnnotations()) {
								if (an.getTypeName().equals("org.junit.Test")) {
									runWithAnnotation.addAnnotation(vwRunnerAnnotationFor(runner, pool));
									clazz.addAttribute(runWithAnnotation);
									clazz.write(new DataOutputStream(new FileOutputStream(file)))
									break
								}
							}
						}
					}
				}
			}
		}
	}
}

boolean isRuntimeAnnotation(AttributeInfo attribute) {
	return AnnotationsAttribute.visibleTag.equals(attribute.getName())
}

boolean isParameterizedRunner(ClassMemberValue clazz) {
	return "org.junit.runners.Parameterized".equals(clazz?.getValue())
}

Annotation vwRunnerAnnotationFor(ClassMemberValue clazz, ConstPool cp) {
	Annotation annotation = new Annotation("org.junit.runner.RunWith", cp);
	String runnerClass = isParameterizedRunner(clazz) ? ParameterizedJUnitVWRunner.class.getName() : JUnitVWRunner.class.getName()
	annotation.addMemberValue("value", new ClassMemberValue(runnerClass, cp));
	return annotation
}
